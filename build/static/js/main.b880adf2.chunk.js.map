{"version":3,"sources":["components/Cell/Cell.tsx","components/Board/Board.tsx","components/Game/Game.tsx","App.tsx","index.tsx"],"names":["Cell","value","onClick","cMenu","className","isRevealed","isMine","isFlagged","onContextMenu","neighbour","Board","width","height","mines","useState","setGameStatus","setMineCount","getRandomNumber","dimension","Math","floor","random","traverseBoard","cellX","cellY","boardArray","el","push","arrayWithMines","map","oneDimensionArray","cell","mine","x","y","isEmpty","getNeighbours","emptyArray","randomx","randomy","i","plantMines","Array","from","fill","_","__","createEmptyArray","initBoard","board","setBoard","revealBoard","prevBoard","datarow","dataitem","_handleCellClick","alert","data","updatedData","revealEmpty","length","getFlags","renderBoard","useCallback","key","Game","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b880adf2.chunk.js","sourcesContent":["import React, { FC, useMemo } from \"react\";\r\n\r\ntype Props = {\r\n  value?: any;\r\n  onClick?: any;\r\n  cMenu?: any;\r\n}\r\n\r\nconst Cell: FC<Props> = ({value, onClick, cMenu}) => {\r\n  const getValue = () => {\r\n    if (!value.isRevealed) {\r\n      return value.isFlagged ? \"ðŸš©\" : null;\r\n    }\r\n    if (value.isMine) {\r\n      return \"ðŸ’£\";\r\n    }\r\n    if (value.neighbour === 0) {\r\n      return null;\r\n    }\r\n    return value.neighbour;\r\n  };\r\n\r\n  const className =\r\n    \"cell\" +\r\n    (value.isRevealed ? \"\" : \" hidden\") +\r\n    (value.isMine ? \" is-mine\" : \"\") +\r\n    (value.isFlagged ? \" is-flag\" : \"\");\r\n\r\n  return (\r\n    <div onClick={onClick} className={className} onContextMenu={cMenu}>\r\n      {getValue()}\r\n    </div>)\r\n\r\n};\r\n\r\nexport default Cell;\r\n","import React, { FC, useCallback, useState } from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\n\r\ntype Props = {\r\n  height: number;\r\n  width: number;\r\n  mines: number\r\n}\r\n\r\nconst Board: FC<Props> = ({width, height, mines}) => {\r\n  const [gameStatus, setGameStatus] = useState('');\r\n  const [mineCount, setMineCount] = useState(0);\r\n\r\n  const createEmptyArray = (height: number, width: number) => {\r\n    return Array\r\n      .from(Array(width)\r\n        .fill(0), (_: number, y: number) => new Array(height)\r\n        .fill(0)\r\n        .map((__: number, x: number) => ({\r\n          x,\r\n          y,\r\n          isMine: false,\r\n          neighbour: 0,\r\n          isRevealed: false,\r\n          isEmpty: false,\r\n          isFlagged: false,\r\n        })));\r\n  };\r\n\r\n  const getRandomNumber = (dimension: number): number => {\r\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n  };\r\n\r\n  const plantMines = (emptyArray: any, height: number, width: number, mines: number) => {\r\n    let randomx, randomy = 0;\r\n\r\n    let i = mines;\r\n    for (; i--;) {\r\n      [randomx, randomy] = [getRandomNumber(width), getRandomNumber(height)];\r\n\r\n      if (!emptyArray[randomx][randomy].isMine) {\r\n        emptyArray[randomx][randomy].isMine = true;\r\n      }\r\n    }\r\n\r\n    return emptyArray;\r\n  };\r\n\r\n  const traverseBoard = (cellX: number, cellY: number, boardArray: any) => {\r\n    const el = [];\r\n\r\n    //up\r\n    if (cellX > 0) {\r\n      el.push(boardArray[cellX - 1][cellY]);\r\n    }\r\n\r\n    //down\r\n    if (cellX < height - 1) {\r\n      el.push(boardArray[cellX + 1][cellY]);\r\n    }\r\n\r\n    //left\r\n    if (cellY > 0) {\r\n      el.push(boardArray[cellX][cellY - 1]);\r\n    }\r\n\r\n    //right\r\n    if (cellY < width - 1) {\r\n      el.push(boardArray[cellX][cellY + 1]);\r\n    }\r\n\r\n    // top left\r\n    if (cellX > 0 && cellY > 0) {\r\n      el.push(boardArray[cellX - 1][cellY - 1]);\r\n    }\r\n\r\n    // top right\r\n    if (cellX > 0 && cellY < width - 1) {\r\n      el.push(boardArray[cellX - 1][cellY + 1]);\r\n    }\r\n\r\n    // bottom right\r\n    if (cellX < height - 1 && cellY < width - 1) {\r\n      el.push(boardArray[cellX + 1][cellY + 1]);\r\n    }\r\n\r\n    // bottom left\r\n    if (cellX < height - 1 && cellY > 0) {\r\n      el.push(boardArray[cellX + 1][cellY - 1]);\r\n    }\r\n\r\n    return el;\r\n  };\r\n\r\n  const getNeighbours = (arrayWithMines: any) => {\r\n    return arrayWithMines.map((oneDimensionArray: any) => {\r\n      return oneDimensionArray.map((cell: any) => {\r\n        if (!cell.isMine) {\r\n          let mine = 0;\r\n          const area = traverseBoard(cell.x, cell.y, arrayWithMines);\r\n          area.map((value: any) => {\r\n            if (value.isMine) {\r\n              mine++;\r\n            }\r\n            return false;\r\n          });\r\n\r\n          if (mine === 0) {\r\n            cell.isEmpty = true;\r\n          }\r\n          cell.neighbour = mine;\r\n        }\r\n        return cell;\r\n      })\r\n    });\r\n  };\r\n\r\n  const initBoard = (height: number, width: number, mines: number) => {\r\n    const dataArray = createEmptyArray(height, width);\r\n    const arrayWithMines = plantMines(dataArray, height, width, mines);\r\n    return getNeighbours(arrayWithMines);\r\n  };\r\n\r\n  const [board, setBoard] = useState(initBoard(height, width, mines));\r\n\r\n  const revealBoard = () => {\r\n    setBoard((prevBoard: any) => {\r\n      return prevBoard.map((datarow: any) => {\r\n        return datarow.map((dataitem: any) => {\r\n          dataitem.isRevealed = true;\r\n          return dataitem\r\n        });\r\n      });\r\n    })\r\n  };\r\n\r\n  const getFlags = (data: any) => {\r\n    return data.map((datarow: any) => {\r\n      return datarow.map((dataitem: any) => {\r\n        if (dataitem.isFlagged) {\r\n          return dataitem;\r\n        }\r\n        return false;\r\n      });\r\n    });\r\n  };\r\n\r\n  const revealEmpty = (x: any, y: any, data: any) => {\r\n    let area = traverseBoard(x, y, data);\r\n    area.map(value => {\r\n      if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n        data[value.x][value.y].isRevealed = true;\r\n        if (value.isEmpty) {\r\n          revealEmpty(value.x, value.y, data);\r\n        }\r\n      }\r\n    });\r\n    return data;\r\n  };\r\n\r\n  const getHidden = (data: any) => {\r\n    return data.map((datarow: any) => {\r\n      return datarow.map((dataitem: any) => {\r\n        if (!dataitem.isRevealed) {\r\n          return dataitem;\r\n        }\r\n        return false;\r\n      });\r\n    });\r\n  };\r\n\r\n\r\n  const _handleCellClick = (y: any, x: any) => {\r\n\r\n    // check if revealed. return if true.\r\n    if (board[x][y].isRevealed || board[x][y].isFlagged) return null;\r\n\r\n    // check if mine. game over if true\r\n    if (board[x][y].isMine) {\r\n      setGameStatus('You Lost.');\r\n      revealBoard();\r\n      alert(\"game over\");\r\n    }\r\n\r\n    let updatedData = [...board];\r\n    updatedData[x][y].isFlagged = false;\r\n    updatedData[x][y].isRevealed = true;\r\n\r\n    if (updatedData[x][y].isEmpty) {\r\n      updatedData = revealEmpty(x, y, updatedData);\r\n    }\r\n\r\n    if (getHidden(updatedData).length === mines) {\r\n      setMineCount(0);\r\n      setGameStatus('You Win.');\r\n      revealBoard();\r\n      alert(\"You Win\");\r\n    }\r\n    setBoard(() => updatedData);\r\n    setMineCount(mines - getFlags(updatedData).length);\r\n  };\r\n\r\n  // cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\r\n\r\n  const renderBoard = useCallback(() => {\r\n    return board.map((datarow: any) => {\r\n      return datarow.map((dataitem: any) => {\r\n        return (\r\n          <div key={dataitem.x * datarow.length + dataitem.y}>\r\n            <Cell\r\n              onClick={() => _handleCellClick(dataitem.x, dataitem.y)}\r\n              value={dataitem}\r\n            />\r\n            {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\"/> : \"\"}\r\n          </div>);\r\n      })\r\n    });\r\n  }, [board]);\r\n\r\n  return (\r\n    <div>\r\n      Board\r\n      <div>\r\n        {renderBoard()}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Board;\r\n","import React, { FC, useState } from \"react\";\r\nimport Board from \"./../Board/Board\";\r\n\r\nconst Game: FC = () => {\r\n  const [width, setWidth] = useState(8);\r\n  const [height, setHeight] = useState(8);\r\n  const [mines, setMines] = useState(30);\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <Board width={width} height={height} mines={mines}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from \"./components/Game/Game\";\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}